{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst duration_1 = require(\"./duration\");\nconst experimental_1 = require(\"./experimental\");\nconst load_balancer_1 = require(\"./load-balancer\");\nconst load_balancer_child_handler_1 = require(\"./load-balancer-child-handler\");\nconst picker_1 = require(\"./picker\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst subchannel_interface_1 = require(\"./subchannel-interface\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'outlier_detection';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'outlier_detection';\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';\nconst defaultSuccessRateEjectionConfig = {\n  stdev_factor: 1900,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 100\n};\nconst defaultFailurePercentageEjectionConfig = {\n  threshold: 85,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 50\n};\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\n  if (fieldName in obj && typeof obj[fieldName] !== expectedType) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\n  }\n}\nfunction validatePositiveDuration(obj, fieldName, objectName) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  if (fieldName in obj) {\n    if (!(0, duration_1.isDuration)(obj[fieldName])) {\n      throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\n    }\n    if (!(obj[fieldName].seconds >= 0 && obj[fieldName].seconds <= 315576000000 && obj[fieldName].nanos >= 0 && obj[fieldName].nanos <= 999999999)) {\n      throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\n    }\n  }\n}\nfunction validatePercentage(obj, fieldName, objectName) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  validateFieldType(obj, fieldName, 'number', objectName);\n  if (fieldName in obj && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n    throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\n  }\n}\nclass OutlierDetectionLoadBalancingConfig {\n  constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {\n    this.childPolicy = childPolicy;\n    if (childPolicy.length > 0 && childPolicy[0].getLoadBalancerName() === 'pick_first') {\n      throw new Error('outlier_detection LB policy cannot have a pick_first child policy');\n    }\n    this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\n    this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\n    this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\n    this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\n    this.successRateEjection = successRateEjection ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\n    this.failurePercentageEjection = failurePercentageEjection ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\n  }\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  toJsonObject() {\n    return {\n      interval: (0, duration_1.msToDuration)(this.intervalMs),\n      base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\n      max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\n      max_ejection_percent: this.maxEjectionPercent,\n      success_rate_ejection: this.successRateEjection,\n      failure_percentage_ejection: this.failurePercentageEjection,\n      child_policy: this.childPolicy.map(policy => policy.toJsonObject())\n    };\n  }\n  getIntervalMs() {\n    return this.intervalMs;\n  }\n  getBaseEjectionTimeMs() {\n    return this.baseEjectionTimeMs;\n  }\n  getMaxEjectionTimeMs() {\n    return this.maxEjectionTimeMs;\n  }\n  getMaxEjectionPercent() {\n    return this.maxEjectionPercent;\n  }\n  getSuccessRateEjectionConfig() {\n    return this.successRateEjection;\n  }\n  getFailurePercentageEjectionConfig() {\n    return this.failurePercentageEjection;\n  }\n  getChildPolicy() {\n    return this.childPolicy;\n  }\n  copyWithChildPolicy(childPolicy) {\n    return new OutlierDetectionLoadBalancingConfig(this.intervalMs, this.baseEjectionTimeMs, this.maxEjectionTimeMs, this.maxEjectionPercent, this.successRateEjection, this.failurePercentageEjection, childPolicy);\n  }\n  static createFromJson(obj) {\n    var _a;\n    validatePositiveDuration(obj, 'interval');\n    validatePositiveDuration(obj, 'base_ejection_time');\n    validatePositiveDuration(obj, 'max_ejection_time');\n    validatePercentage(obj, 'max_ejection_percent');\n    if ('success_rate_ejection' in obj) {\n      if (typeof obj.success_rate_ejection !== 'object') {\n        throw new Error('outlier detection config success_rate_ejection must be an object');\n      }\n      validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');\n      validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');\n      validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');\n      validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');\n    }\n    if ('failure_percentage_ejection' in obj) {\n      if (typeof obj.failure_percentage_ejection !== 'object') {\n        throw new Error('outlier detection config failure_percentage_ejection must be an object');\n      }\n      validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');\n      validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');\n      validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');\n      validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');\n    }\n    return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, obj.child_policy.map(load_balancer_1.validateLoadBalancingConfig));\n  }\n}\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n  constructor(childSubchannel, mapEntry) {\n    super(childSubchannel);\n    this.mapEntry = mapEntry;\n    this.stateListeners = [];\n    this.ejected = false;\n    this.refCount = 0;\n    this.childSubchannelState = childSubchannel.getConnectivityState();\n    childSubchannel.addConnectivityStateListener((subchannel, previousState, newState, keepaliveTime) => {\n      this.childSubchannelState = newState;\n      if (!this.ejected) {\n        for (const listener of this.stateListeners) {\n          listener(this, previousState, newState, keepaliveTime);\n        }\n      }\n    });\n  }\n  getConnectivityState() {\n    if (this.ejected) {\n      return connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n    } else {\n      return this.childSubchannelState;\n    }\n  }\n  /**\n   * Add a listener function to be called whenever the wrapper's\n   * connectivity state changes.\n   * @param listener\n   */\n  addConnectivityStateListener(listener) {\n    this.stateListeners.push(listener);\n  }\n  /**\n   * Remove a listener previously added with `addConnectivityStateListener`\n   * @param listener A reference to a function previously passed to\n   *     `addConnectivityStateListener`\n   */\n  removeConnectivityStateListener(listener) {\n    const listenerIndex = this.stateListeners.indexOf(listener);\n    if (listenerIndex > -1) {\n      this.stateListeners.splice(listenerIndex, 1);\n    }\n  }\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      if (this.mapEntry) {\n        const index = this.mapEntry.subchannelWrappers.indexOf(this);\n        if (index >= 0) {\n          this.mapEntry.subchannelWrappers.splice(index, 1);\n        }\n      }\n    }\n  }\n  eject() {\n    this.ejected = true;\n    for (const listener of this.stateListeners) {\n      listener(this, this.childSubchannelState, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, -1);\n    }\n  }\n  uneject() {\n    this.ejected = false;\n    for (const listener of this.stateListeners) {\n      listener(this, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, this.childSubchannelState, -1);\n    }\n  }\n  getMapEntry() {\n    return this.mapEntry;\n  }\n  getWrappedSubchannel() {\n    return this.child;\n  }\n}\nfunction createEmptyBucket() {\n  return {\n    success: 0,\n    failure: 0\n  };\n}\nclass CallCounter {\n  constructor() {\n    this.activeBucket = createEmptyBucket();\n    this.inactiveBucket = createEmptyBucket();\n  }\n  addSuccess() {\n    this.activeBucket.success += 1;\n  }\n  addFailure() {\n    this.activeBucket.failure += 1;\n  }\n  switchBuckets() {\n    this.inactiveBucket = this.activeBucket;\n    this.activeBucket = createEmptyBucket();\n  }\n  getLastSuccesses() {\n    return this.inactiveBucket.success;\n  }\n  getLastFailures() {\n    return this.inactiveBucket.failure;\n  }\n}\nclass OutlierDetectionPicker {\n  constructor(wrappedPicker, countCalls) {\n    this.wrappedPicker = wrappedPicker;\n    this.countCalls = countCalls;\n  }\n  pick(pickArgs) {\n    const wrappedPick = this.wrappedPicker.pick(pickArgs);\n    if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\n      const subchannelWrapper = wrappedPick.subchannel;\n      const mapEntry = subchannelWrapper.getMapEntry();\n      if (mapEntry) {\n        let onCallEnded = wrappedPick.onCallEnded;\n        if (this.countCalls) {\n          onCallEnded = statusCode => {\n            var _a;\n            if (statusCode === constants_1.Status.OK) {\n              mapEntry.counter.addSuccess();\n            } else {\n              mapEntry.counter.addFailure();\n            }\n            (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\n          };\n        }\n        return Object.assign(Object.assign({}, wrappedPick), {\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n          onCallEnded: onCallEnded\n        });\n      } else {\n        return Object.assign(Object.assign({}, wrappedPick), {\n          subchannel: subchannelWrapper.getWrappedSubchannel()\n        });\n      }\n    } else {\n      return wrappedPick;\n    }\n  }\n}\nclass OutlierDetectionLoadBalancer {\n  constructor(channelControlHelper) {\n    this.addressMap = new Map();\n    this.latestConfig = null;\n    this.timerStartTime = null;\n    this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\n      createSubchannel: (subchannelAddress, subchannelArgs) => {\n        const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n        const mapEntry = this.addressMap.get((0, subchannel_address_1.subchannelAddressToString)(subchannelAddress));\n        const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\n        if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\n          // If the address is ejected, propagate that to the new subchannel wrapper\n          subchannelWrapper.eject();\n        }\n        mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\n        return subchannelWrapper;\n      },\n      updateState: (connectivityState, picker) => {\n        if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\n          channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()));\n        } else {\n          channelControlHelper.updateState(connectivityState, picker);\n        }\n      }\n    }));\n    this.ejectionTimer = setInterval(() => {}, 0);\n    clearInterval(this.ejectionTimer);\n  }\n  isCountingEnabled() {\n    return this.latestConfig !== null && (this.latestConfig.getSuccessRateEjectionConfig() !== null || this.latestConfig.getFailurePercentageEjectionConfig() !== null);\n  }\n  getCurrentEjectionPercent() {\n    let ejectionCount = 0;\n    for (const mapEntry of this.addressMap.values()) {\n      if (mapEntry.currentEjectionTimestamp !== null) {\n        ejectionCount += 1;\n      }\n    }\n    return ejectionCount * 100 / this.addressMap.size;\n  }\n  runSuccessRateCheck(ejectionTimestamp) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n    if (!successRateConfig) {\n      return;\n    }\n    trace('Running success rate check');\n    // Step 1\n    const targetRequestVolume = successRateConfig.request_volume;\n    let addresesWithTargetVolume = 0;\n    const successRates = [];\n    for (const [address, mapEntry] of this.addressMap) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Stats for ' + address + ': successes=' + successes + ' failures=' + failures + ' targetRequestVolume=' + targetRequestVolume);\n      if (successes + failures >= targetRequestVolume) {\n        addresesWithTargetVolume += 1;\n        successRates.push(successes / (successes + failures));\n      }\n    }\n    trace('Found ' + addresesWithTargetVolume + ' success rate candidates; currentEjectionPercent=' + this.getCurrentEjectionPercent() + ' successRates=[' + successRates + ']');\n    if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n      return;\n    }\n    // Step 2\n    const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;\n    let successRateDeviationSum = 0;\n    for (const rate of successRates) {\n      const deviation = rate - successRateMean;\n      successRateDeviationSum += deviation * deviation;\n    }\n    const successRateVariance = successRateDeviationSum / successRates.length;\n    const successRateStdev = Math.sqrt(successRateVariance);\n    const ejectionThreshold = successRateMean - successRateStdev * (successRateConfig.stdev_factor / 1000);\n    trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);\n    // Step 3\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      // Step 3.i\n      if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n        break;\n      }\n      // Step 3.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures < targetRequestVolume) {\n        continue;\n      }\n      // Step 3.iii\n      const successRate = successes / (successes + failures);\n      trace('Checking candidate ' + address + ' successRate=' + successRate);\n      if (successRate < ejectionThreshold) {\n        const randomNumber = Math.random() * 100;\n        trace('Candidate ' + address + ' randomNumber=' + randomNumber + ' enforcement_percentage=' + successRateConfig.enforcement_percentage);\n        if (randomNumber < successRateConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n  runFailurePercentageCheck(ejectionTimestamp) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\n    if (!failurePercentageConfig) {\n      return;\n    }\n    trace('Running failure percentage check. threshold=' + failurePercentageConfig.threshold + ' request volume threshold=' + failurePercentageConfig.request_volume);\n    // Step 1\n    let addressesWithTargetVolume = 0;\n    for (const mapEntry of this.addressMap.values()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures >= failurePercentageConfig.request_volume) {\n        addressesWithTargetVolume += 1;\n      }\n    }\n    if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n      return;\n    }\n    // Step 2\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      // Step 2.i\n      if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n        break;\n      }\n      // Step 2.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Candidate successes=' + successes + ' failures=' + failures);\n      if (successes + failures < failurePercentageConfig.request_volume) {\n        continue;\n      }\n      // Step 2.iii\n      const failurePercentage = failures * 100 / (failures + successes);\n      if (failurePercentage > failurePercentageConfig.threshold) {\n        const randomNumber = Math.random() * 100;\n        trace('Candidate ' + address + ' randomNumber=' + randomNumber + ' enforcement_percentage=' + failurePercentageConfig.enforcement_percentage);\n        if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n  eject(mapEntry, ejectionTimestamp) {\n    mapEntry.currentEjectionTimestamp = new Date();\n    mapEntry.ejectionTimeMultiplier += 1;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.eject();\n    }\n  }\n  uneject(mapEntry) {\n    mapEntry.currentEjectionTimestamp = null;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.uneject();\n    }\n  }\n  switchAllBuckets() {\n    for (const mapEntry of this.addressMap.values()) {\n      mapEntry.counter.switchBuckets();\n    }\n  }\n  startTimer(delayMs) {\n    var _a, _b;\n    this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\n    (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  runChecks() {\n    const ejectionTimestamp = new Date();\n    trace('Ejection timer running');\n    this.switchAllBuckets();\n    if (!this.latestConfig) {\n      return;\n    }\n    this.timerStartTime = ejectionTimestamp;\n    this.startTimer(this.latestConfig.getIntervalMs());\n    this.runSuccessRateCheck(ejectionTimestamp);\n    this.runFailurePercentageCheck(ejectionTimestamp);\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      if (mapEntry.currentEjectionTimestamp === null) {\n        if (mapEntry.ejectionTimeMultiplier > 0) {\n          mapEntry.ejectionTimeMultiplier -= 1;\n        }\n      } else {\n        const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n        const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n        const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\n        returnTime.setMilliseconds(returnTime.getMilliseconds() + Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\n        if (returnTime < new Date()) {\n          trace('Unejecting ' + address);\n          this.uneject(mapEntry);\n        }\n      }\n    }\n  }\n  updateAddressList(addressList, lbConfig, attributes) {\n    if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n      return;\n    }\n    const subchannelAddresses = new Set();\n    for (const address of addressList) {\n      subchannelAddresses.add((0, subchannel_address_1.subchannelAddressToString)(address));\n    }\n    for (const address of subchannelAddresses) {\n      if (!this.addressMap.has(address)) {\n        trace('Adding map entry for ' + address);\n        this.addressMap.set(address, {\n          counter: new CallCounter(),\n          currentEjectionTimestamp: null,\n          ejectionTimeMultiplier: 0,\n          subchannelWrappers: []\n        });\n      }\n    }\n    for (const key of this.addressMap.keys()) {\n      if (!subchannelAddresses.has(key)) {\n        trace('Removing map entry for ' + key);\n        this.addressMap.delete(key);\n      }\n    }\n    const childPolicy = (0, load_balancer_1.getFirstUsableConfig)(lbConfig.getChildPolicy(), true);\n    this.childBalancer.updateAddressList(addressList, childPolicy, attributes);\n    if (lbConfig.getSuccessRateEjectionConfig() || lbConfig.getFailurePercentageEjectionConfig()) {\n      if (this.timerStartTime) {\n        trace('Previous timer existed. Replacing timer');\n        clearTimeout(this.ejectionTimer);\n        const remainingDelay = lbConfig.getIntervalMs() - (new Date().getTime() - this.timerStartTime.getTime());\n        this.startTimer(remainingDelay);\n      } else {\n        trace('Starting new timer');\n        this.timerStartTime = new Date();\n        this.startTimer(lbConfig.getIntervalMs());\n        this.switchAllBuckets();\n      }\n    } else {\n      trace('Counting disabled. Cancelling timer.');\n      this.timerStartTime = null;\n      clearTimeout(this.ejectionTimer);\n      for (const mapEntry of this.addressMap.values()) {\n        this.uneject(mapEntry);\n        mapEntry.ejectionTimeMultiplier = 0;\n      }\n    }\n    this.latestConfig = lbConfig;\n  }\n  exitIdle() {\n    this.childBalancer.exitIdle();\n  }\n  resetBackoff() {\n    this.childBalancer.resetBackoff();\n  }\n  destroy() {\n    clearTimeout(this.ejectionTimer);\n    this.childBalancer.destroy();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\nfunction setup() {\n  if (OUTLIER_DETECTION_ENABLED) {\n    (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\n  }\n}\nexports.setup = setup;","map":{"version":3,"names":["connectivity_state_1","require","constants_1","duration_1","experimental_1","load_balancer_1","load_balancer_child_handler_1","picker_1","subchannel_address_1","subchannel_interface_1","logging","TRACER_NAME","trace","text","LogVerbosity","DEBUG","TYPE_NAME","OUTLIER_DETECTION_ENABLED","_a","process","env","GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION","defaultSuccessRateEjectionConfig","stdev_factor","enforcement_percentage","minimum_hosts","request_volume","defaultFailurePercentageEjectionConfig","threshold","validateFieldType","obj","fieldName","expectedType","objectName","fullFieldName","Error","validatePositiveDuration","isDuration","seconds","nanos","validatePercentage","OutlierDetectionLoadBalancingConfig","constructor","intervalMs","baseEjectionTimeMs","maxEjectionTimeMs","maxEjectionPercent","successRateEjection","failurePercentageEjection","childPolicy","length","getLoadBalancerName","Object","assign","toJsonObject","interval","msToDuration","base_ejection_time","max_ejection_time","max_ejection_percent","success_rate_ejection","failure_percentage_ejection","child_policy","map","policy","getIntervalMs","getBaseEjectionTimeMs","getMaxEjectionTimeMs","getMaxEjectionPercent","getSuccessRateEjectionConfig","getFailurePercentageEjectionConfig","getChildPolicy","copyWithChildPolicy","createFromJson","durationToMs","validateLoadBalancingConfig","exports","OutlierDetectionSubchannelWrapper","BaseSubchannelWrapper","childSubchannel","mapEntry","stateListeners","ejected","refCount","childSubchannelState","getConnectivityState","addConnectivityStateListener","subchannel","previousState","newState","keepaliveTime","listener","ConnectivityState","TRANSIENT_FAILURE","push","removeConnectivityStateListener","listenerIndex","indexOf","splice","ref","child","unref","index","subchannelWrappers","eject","uneject","getMapEntry","getWrappedSubchannel","createEmptyBucket","success","failure","CallCounter","activeBucket","inactiveBucket","addSuccess","addFailure","switchBuckets","getLastSuccesses","getLastFailures","OutlierDetectionPicker","wrappedPicker","countCalls","pick","pickArgs","wrappedPick","pickResultType","PickResultType","COMPLETE","subchannelWrapper","onCallEnded","statusCode","Status","OK","counter","call","OutlierDetectionLoadBalancer","channelControlHelper","addressMap","Map","latestConfig","timerStartTime","childBalancer","ChildLoadBalancerHandler","createChildChannelControlHelper","createSubchannel","subchannelAddress","subchannelArgs","originalSubchannel","get","subchannelAddressToString","currentEjectionTimestamp","updateState","connectivityState","picker","READY","isCountingEnabled","ejectionTimer","setInterval","clearInterval","getCurrentEjectionPercent","ejectionCount","values","size","runSuccessRateCheck","ejectionTimestamp","successRateConfig","targetRequestVolume","addresesWithTargetVolume","successRates","address","successes","failures","successRateMean","reduce","a","b","successRateDeviationSum","rate","deviation","successRateVariance","successRateStdev","Math","sqrt","ejectionThreshold","entries","successRate","randomNumber","random","runFailurePercentageCheck","failurePercentageConfig","addressesWithTargetVolume","failurePercentage","Date","ejectionTimeMultiplier","switchAllBuckets","startTimer","delayMs","setTimeout","runChecks","_b","returnTime","getTime","setMilliseconds","getMilliseconds","min","max","updateAddressList","addressList","lbConfig","attributes","subchannelAddresses","Set","add","has","set","key","keys","delete","getFirstUsableConfig","clearTimeout","remainingDelay","exitIdle","resetBackoff","destroy","getTypeName","setup","registerLoadBalancerType"],"sources":["/Users/juanrodriguez/Documents/projects/face-detection-app/node_modules/@grpc/grpc-js/src/load-balancer-outlier-detection.ts"],"sourcesContent":["/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelOptions } from './channel-options';\nimport { ConnectivityState } from './connectivity-state';\nimport { LogVerbosity, Status } from './constants';\nimport { durationToMs, isDuration, msToDuration } from './duration';\nimport {\n  ChannelControlHelper,\n  createChildChannelControlHelper,\n  registerLoadBalancerType,\n} from './experimental';\nimport {\n  getFirstUsableConfig,\n  LoadBalancer,\n  LoadBalancingConfig,\n  validateLoadBalancingConfig,\n} from './load-balancer';\nimport { ChildLoadBalancerHandler } from './load-balancer-child-handler';\nimport { PickArgs, Picker, PickResult, PickResultType } from './picker';\nimport {\n  SubchannelAddress,\n  subchannelAddressToString,\n} from './subchannel-address';\nimport {\n  BaseSubchannelWrapper,\n  ConnectivityStateListener,\n  SubchannelInterface,\n} from './subchannel-interface';\nimport * as logging from './logging';\n\nconst TRACER_NAME = 'outlier_detection';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst TYPE_NAME = 'outlier_detection';\n\nconst OUTLIER_DETECTION_ENABLED =\n  (process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION ?? 'true') === 'true';\n\nexport interface SuccessRateEjectionConfig {\n  readonly stdev_factor: number;\n  readonly enforcement_percentage: number;\n  readonly minimum_hosts: number;\n  readonly request_volume: number;\n}\n\nexport interface FailurePercentageEjectionConfig {\n  readonly threshold: number;\n  readonly enforcement_percentage: number;\n  readonly minimum_hosts: number;\n  readonly request_volume: number;\n}\n\nconst defaultSuccessRateEjectionConfig: SuccessRateEjectionConfig = {\n  stdev_factor: 1900,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 100,\n};\n\nconst defaultFailurePercentageEjectionConfig: FailurePercentageEjectionConfig =\n  {\n    threshold: 85,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 50,\n  };\n\ntype TypeofValues =\n  | 'object'\n  | 'boolean'\n  | 'function'\n  | 'number'\n  | 'string'\n  | 'undefined';\n\nfunction validateFieldType(\n  obj: any,\n  fieldName: string,\n  expectedType: TypeofValues,\n  objectName?: string\n) {\n  if (fieldName in obj && typeof obj[fieldName] !== expectedType) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    throw new Error(\n      `outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[\n        fieldName\n      ]}`\n    );\n  }\n}\n\nfunction validatePositiveDuration(\n  obj: any,\n  fieldName: string,\n  objectName?: string\n) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  if (fieldName in obj) {\n    if (!isDuration(obj[fieldName])) {\n      throw new Error(\n        `outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[\n          fieldName\n        ]}`\n      );\n    }\n    if (\n      !(\n        obj[fieldName].seconds >= 0 &&\n        obj[fieldName].seconds <= 315_576_000_000 &&\n        obj[fieldName].nanos >= 0 &&\n        obj[fieldName].nanos <= 999_999_999\n      )\n    ) {\n      throw new Error(\n        `outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`\n      );\n    }\n  }\n}\n\nfunction validatePercentage(obj: any, fieldName: string, objectName?: string) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  validateFieldType(obj, fieldName, 'number', objectName);\n  if (fieldName in obj && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n    throw new Error(\n      `outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`\n    );\n  }\n}\n\nexport class OutlierDetectionLoadBalancingConfig\n  implements LoadBalancingConfig\n{\n  private readonly intervalMs: number;\n  private readonly baseEjectionTimeMs: number;\n  private readonly maxEjectionTimeMs: number;\n  private readonly maxEjectionPercent: number;\n  private readonly successRateEjection: SuccessRateEjectionConfig | null;\n  private readonly failurePercentageEjection: FailurePercentageEjectionConfig | null;\n\n  constructor(\n    intervalMs: number | null,\n    baseEjectionTimeMs: number | null,\n    maxEjectionTimeMs: number | null,\n    maxEjectionPercent: number | null,\n    successRateEjection: Partial<SuccessRateEjectionConfig> | null,\n    failurePercentageEjection: Partial<FailurePercentageEjectionConfig> | null,\n    private readonly childPolicy: LoadBalancingConfig[]\n  ) {\n    if (\n      childPolicy.length > 0 &&\n      childPolicy[0].getLoadBalancerName() === 'pick_first'\n    ) {\n      throw new Error(\n        'outlier_detection LB policy cannot have a pick_first child policy'\n      );\n    }\n    this.intervalMs = intervalMs ?? 10_000;\n    this.baseEjectionTimeMs = baseEjectionTimeMs ?? 30_000;\n    this.maxEjectionTimeMs = maxEjectionTimeMs ?? 300_000;\n    this.maxEjectionPercent = maxEjectionPercent ?? 10;\n    this.successRateEjection = successRateEjection\n      ? { ...defaultSuccessRateEjectionConfig, ...successRateEjection }\n      : null;\n    this.failurePercentageEjection = failurePercentageEjection\n      ? {\n          ...defaultFailurePercentageEjectionConfig,\n          ...failurePercentageEjection,\n        }\n      : null;\n  }\n  getLoadBalancerName(): string {\n    return TYPE_NAME;\n  }\n  toJsonObject(): object {\n    return {\n      interval: msToDuration(this.intervalMs),\n      base_ejection_time: msToDuration(this.baseEjectionTimeMs),\n      max_ejection_time: msToDuration(this.maxEjectionTimeMs),\n      max_ejection_percent: this.maxEjectionPercent,\n      success_rate_ejection: this.successRateEjection,\n      failure_percentage_ejection: this.failurePercentageEjection,\n      child_policy: this.childPolicy.map(policy => policy.toJsonObject()),\n    };\n  }\n\n  getIntervalMs(): number {\n    return this.intervalMs;\n  }\n  getBaseEjectionTimeMs(): number {\n    return this.baseEjectionTimeMs;\n  }\n  getMaxEjectionTimeMs(): number {\n    return this.maxEjectionTimeMs;\n  }\n  getMaxEjectionPercent(): number {\n    return this.maxEjectionPercent;\n  }\n  getSuccessRateEjectionConfig(): SuccessRateEjectionConfig | null {\n    return this.successRateEjection;\n  }\n  getFailurePercentageEjectionConfig(): FailurePercentageEjectionConfig | null {\n    return this.failurePercentageEjection;\n  }\n  getChildPolicy(): LoadBalancingConfig[] {\n    return this.childPolicy;\n  }\n\n  copyWithChildPolicy(\n    childPolicy: LoadBalancingConfig[]\n  ): OutlierDetectionLoadBalancingConfig {\n    return new OutlierDetectionLoadBalancingConfig(\n      this.intervalMs,\n      this.baseEjectionTimeMs,\n      this.maxEjectionTimeMs,\n      this.maxEjectionPercent,\n      this.successRateEjection,\n      this.failurePercentageEjection,\n      childPolicy\n    );\n  }\n\n  static createFromJson(obj: any): OutlierDetectionLoadBalancingConfig {\n    validatePositiveDuration(obj, 'interval');\n    validatePositiveDuration(obj, 'base_ejection_time');\n    validatePositiveDuration(obj, 'max_ejection_time');\n    validatePercentage(obj, 'max_ejection_percent');\n    if ('success_rate_ejection' in obj) {\n      if (typeof obj.success_rate_ejection !== 'object') {\n        throw new Error(\n          'outlier detection config success_rate_ejection must be an object'\n        );\n      }\n      validateFieldType(\n        obj.success_rate_ejection,\n        'stdev_factor',\n        'number',\n        'success_rate_ejection'\n      );\n      validatePercentage(\n        obj.success_rate_ejection,\n        'enforcement_percentage',\n        'success_rate_ejection'\n      );\n      validateFieldType(\n        obj.success_rate_ejection,\n        'minimum_hosts',\n        'number',\n        'success_rate_ejection'\n      );\n      validateFieldType(\n        obj.success_rate_ejection,\n        'request_volume',\n        'number',\n        'success_rate_ejection'\n      );\n    }\n    if ('failure_percentage_ejection' in obj) {\n      if (typeof obj.failure_percentage_ejection !== 'object') {\n        throw new Error(\n          'outlier detection config failure_percentage_ejection must be an object'\n        );\n      }\n      validatePercentage(\n        obj.failure_percentage_ejection,\n        'threshold',\n        'failure_percentage_ejection'\n      );\n      validatePercentage(\n        obj.failure_percentage_ejection,\n        'enforcement_percentage',\n        'failure_percentage_ejection'\n      );\n      validateFieldType(\n        obj.failure_percentage_ejection,\n        'minimum_hosts',\n        'number',\n        'failure_percentage_ejection'\n      );\n      validateFieldType(\n        obj.failure_percentage_ejection,\n        'request_volume',\n        'number',\n        'failure_percentage_ejection'\n      );\n    }\n\n    return new OutlierDetectionLoadBalancingConfig(\n      obj.interval ? durationToMs(obj.interval) : null,\n      obj.base_ejection_time ? durationToMs(obj.base_ejection_time) : null,\n      obj.max_ejection_time ? durationToMs(obj.max_ejection_time) : null,\n      obj.max_ejection_percent ?? null,\n      obj.success_rate_ejection,\n      obj.failure_percentage_ejection,\n      obj.child_policy.map(validateLoadBalancingConfig)\n    );\n  }\n}\n\nclass OutlierDetectionSubchannelWrapper\n  extends BaseSubchannelWrapper\n  implements SubchannelInterface\n{\n  private childSubchannelState: ConnectivityState;\n  private stateListeners: ConnectivityStateListener[] = [];\n  private ejected = false;\n  private refCount = 0;\n  constructor(\n    childSubchannel: SubchannelInterface,\n    private mapEntry?: MapEntry\n  ) {\n    super(childSubchannel);\n    this.childSubchannelState = childSubchannel.getConnectivityState();\n    childSubchannel.addConnectivityStateListener(\n      (subchannel, previousState, newState, keepaliveTime) => {\n        this.childSubchannelState = newState;\n        if (!this.ejected) {\n          for (const listener of this.stateListeners) {\n            listener(this, previousState, newState, keepaliveTime);\n          }\n        }\n      }\n    );\n  }\n\n  getConnectivityState(): ConnectivityState {\n    if (this.ejected) {\n      return ConnectivityState.TRANSIENT_FAILURE;\n    } else {\n      return this.childSubchannelState;\n    }\n  }\n\n  /**\n   * Add a listener function to be called whenever the wrapper's\n   * connectivity state changes.\n   * @param listener\n   */\n  addConnectivityStateListener(listener: ConnectivityStateListener) {\n    this.stateListeners.push(listener);\n  }\n\n  /**\n   * Remove a listener previously added with `addConnectivityStateListener`\n   * @param listener A reference to a function previously passed to\n   *     `addConnectivityStateListener`\n   */\n  removeConnectivityStateListener(listener: ConnectivityStateListener) {\n    const listenerIndex = this.stateListeners.indexOf(listener);\n    if (listenerIndex > -1) {\n      this.stateListeners.splice(listenerIndex, 1);\n    }\n  }\n\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      if (this.mapEntry) {\n        const index = this.mapEntry.subchannelWrappers.indexOf(this);\n        if (index >= 0) {\n          this.mapEntry.subchannelWrappers.splice(index, 1);\n        }\n      }\n    }\n  }\n\n  eject() {\n    this.ejected = true;\n    for (const listener of this.stateListeners) {\n      listener(\n        this,\n        this.childSubchannelState,\n        ConnectivityState.TRANSIENT_FAILURE,\n        -1\n      );\n    }\n  }\n\n  uneject() {\n    this.ejected = false;\n    for (const listener of this.stateListeners) {\n      listener(\n        this,\n        ConnectivityState.TRANSIENT_FAILURE,\n        this.childSubchannelState,\n        -1\n      );\n    }\n  }\n\n  getMapEntry(): MapEntry | undefined {\n    return this.mapEntry;\n  }\n\n  getWrappedSubchannel(): SubchannelInterface {\n    return this.child;\n  }\n}\n\ninterface CallCountBucket {\n  success: number;\n  failure: number;\n}\n\nfunction createEmptyBucket(): CallCountBucket {\n  return {\n    success: 0,\n    failure: 0,\n  };\n}\n\nclass CallCounter {\n  private activeBucket: CallCountBucket = createEmptyBucket();\n  private inactiveBucket: CallCountBucket = createEmptyBucket();\n  addSuccess() {\n    this.activeBucket.success += 1;\n  }\n  addFailure() {\n    this.activeBucket.failure += 1;\n  }\n  switchBuckets() {\n    this.inactiveBucket = this.activeBucket;\n    this.activeBucket = createEmptyBucket();\n  }\n  getLastSuccesses() {\n    return this.inactiveBucket.success;\n  }\n  getLastFailures() {\n    return this.inactiveBucket.failure;\n  }\n}\n\ninterface MapEntry {\n  counter: CallCounter;\n  currentEjectionTimestamp: Date | null;\n  ejectionTimeMultiplier: number;\n  subchannelWrappers: OutlierDetectionSubchannelWrapper[];\n}\n\nclass OutlierDetectionPicker implements Picker {\n  constructor(private wrappedPicker: Picker, private countCalls: boolean) {}\n  pick(pickArgs: PickArgs): PickResult {\n    const wrappedPick = this.wrappedPicker.pick(pickArgs);\n    if (wrappedPick.pickResultType === PickResultType.COMPLETE) {\n      const subchannelWrapper =\n        wrappedPick.subchannel as OutlierDetectionSubchannelWrapper;\n      const mapEntry = subchannelWrapper.getMapEntry();\n      if (mapEntry) {\n        let onCallEnded = wrappedPick.onCallEnded;\n        if (this.countCalls) {\n          onCallEnded = statusCode => {\n            if (statusCode === Status.OK) {\n              mapEntry.counter.addSuccess();\n            } else {\n              mapEntry.counter.addFailure();\n            }\n            wrappedPick.onCallEnded?.(statusCode);\n          };\n        }\n        return {\n          ...wrappedPick,\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n          onCallEnded: onCallEnded,\n        };\n      } else {\n        return {\n          ...wrappedPick,\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n        };\n      }\n    } else {\n      return wrappedPick;\n    }\n  }\n}\n\nexport class OutlierDetectionLoadBalancer implements LoadBalancer {\n  private childBalancer: ChildLoadBalancerHandler;\n  private addressMap: Map<string, MapEntry> = new Map<string, MapEntry>();\n  private latestConfig: OutlierDetectionLoadBalancingConfig | null = null;\n  private ejectionTimer: NodeJS.Timer;\n  private timerStartTime: Date | null = null;\n\n  constructor(channelControlHelper: ChannelControlHelper) {\n    this.childBalancer = new ChildLoadBalancerHandler(\n      createChildChannelControlHelper(channelControlHelper, {\n        createSubchannel: (\n          subchannelAddress: SubchannelAddress,\n          subchannelArgs: ChannelOptions\n        ) => {\n          const originalSubchannel = channelControlHelper.createSubchannel(\n            subchannelAddress,\n            subchannelArgs\n          );\n          const mapEntry = this.addressMap.get(\n            subchannelAddressToString(subchannelAddress)\n          );\n          const subchannelWrapper = new OutlierDetectionSubchannelWrapper(\n            originalSubchannel,\n            mapEntry\n          );\n          if (mapEntry?.currentEjectionTimestamp !== null) {\n            // If the address is ejected, propagate that to the new subchannel wrapper\n            subchannelWrapper.eject();\n          }\n          mapEntry?.subchannelWrappers.push(subchannelWrapper);\n          return subchannelWrapper;\n        },\n        updateState: (connectivityState: ConnectivityState, picker: Picker) => {\n          if (connectivityState === ConnectivityState.READY) {\n            channelControlHelper.updateState(\n              connectivityState,\n              new OutlierDetectionPicker(picker, this.isCountingEnabled())\n            );\n          } else {\n            channelControlHelper.updateState(connectivityState, picker);\n          }\n        },\n      })\n    );\n    this.ejectionTimer = setInterval(() => {}, 0);\n    clearInterval(this.ejectionTimer);\n  }\n\n  private isCountingEnabled(): boolean {\n    return (\n      this.latestConfig !== null &&\n      (this.latestConfig.getSuccessRateEjectionConfig() !== null ||\n        this.latestConfig.getFailurePercentageEjectionConfig() !== null)\n    );\n  }\n\n  private getCurrentEjectionPercent() {\n    let ejectionCount = 0;\n    for (const mapEntry of this.addressMap.values()) {\n      if (mapEntry.currentEjectionTimestamp !== null) {\n        ejectionCount += 1;\n      }\n    }\n    return (ejectionCount * 100) / this.addressMap.size;\n  }\n\n  private runSuccessRateCheck(ejectionTimestamp: Date) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n    if (!successRateConfig) {\n      return;\n    }\n    trace('Running success rate check');\n    // Step 1\n    const targetRequestVolume = successRateConfig.request_volume;\n    let addresesWithTargetVolume = 0;\n    const successRates: number[] = [];\n    for (const [address, mapEntry] of this.addressMap) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace(\n        'Stats for ' +\n          address +\n          ': successes=' +\n          successes +\n          ' failures=' +\n          failures +\n          ' targetRequestVolume=' +\n          targetRequestVolume\n      );\n      if (successes + failures >= targetRequestVolume) {\n        addresesWithTargetVolume += 1;\n        successRates.push(successes / (successes + failures));\n      }\n    }\n    trace(\n      'Found ' +\n        addresesWithTargetVolume +\n        ' success rate candidates; currentEjectionPercent=' +\n        this.getCurrentEjectionPercent() +\n        ' successRates=[' +\n        successRates +\n        ']'\n    );\n    if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n      return;\n    }\n\n    // Step 2\n    const successRateMean =\n      successRates.reduce((a, b) => a + b) / successRates.length;\n    let successRateDeviationSum = 0;\n    for (const rate of successRates) {\n      const deviation = rate - successRateMean;\n      successRateDeviationSum += deviation * deviation;\n    }\n    const successRateVariance = successRateDeviationSum / successRates.length;\n    const successRateStdev = Math.sqrt(successRateVariance);\n    const ejectionThreshold =\n      successRateMean -\n      successRateStdev * (successRateConfig.stdev_factor / 1000);\n    trace(\n      'stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold\n    );\n\n    // Step 3\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      // Step 3.i\n      if (\n        this.getCurrentEjectionPercent() >=\n        this.latestConfig.getMaxEjectionPercent()\n      ) {\n        break;\n      }\n      // Step 3.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures < targetRequestVolume) {\n        continue;\n      }\n      // Step 3.iii\n      const successRate = successes / (successes + failures);\n      trace('Checking candidate ' + address + ' successRate=' + successRate);\n      if (successRate < ejectionThreshold) {\n        const randomNumber = Math.random() * 100;\n        trace(\n          'Candidate ' +\n            address +\n            ' randomNumber=' +\n            randomNumber +\n            ' enforcement_percentage=' +\n            successRateConfig.enforcement_percentage\n        );\n        if (randomNumber < successRateConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n\n  private runFailurePercentageCheck(ejectionTimestamp: Date) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const failurePercentageConfig =\n      this.latestConfig.getFailurePercentageEjectionConfig();\n    if (!failurePercentageConfig) {\n      return;\n    }\n    trace(\n      'Running failure percentage check. threshold=' +\n        failurePercentageConfig.threshold +\n        ' request volume threshold=' +\n        failurePercentageConfig.request_volume\n    );\n    // Step 1\n    let addressesWithTargetVolume = 0;\n    for (const mapEntry of this.addressMap.values()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures >= failurePercentageConfig.request_volume) {\n        addressesWithTargetVolume += 1;\n      }\n    }\n    if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n      return;\n    }\n\n    // Step 2\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      // Step 2.i\n      if (\n        this.getCurrentEjectionPercent() >=\n        this.latestConfig.getMaxEjectionPercent()\n      ) {\n        break;\n      }\n      // Step 2.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Candidate successes=' + successes + ' failures=' + failures);\n      if (successes + failures < failurePercentageConfig.request_volume) {\n        continue;\n      }\n      // Step 2.iii\n      const failurePercentage = (failures * 100) / (failures + successes);\n      if (failurePercentage > failurePercentageConfig.threshold) {\n        const randomNumber = Math.random() * 100;\n        trace(\n          'Candidate ' +\n            address +\n            ' randomNumber=' +\n            randomNumber +\n            ' enforcement_percentage=' +\n            failurePercentageConfig.enforcement_percentage\n        );\n        if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n\n  private eject(mapEntry: MapEntry, ejectionTimestamp: Date) {\n    mapEntry.currentEjectionTimestamp = new Date();\n    mapEntry.ejectionTimeMultiplier += 1;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.eject();\n    }\n  }\n\n  private uneject(mapEntry: MapEntry) {\n    mapEntry.currentEjectionTimestamp = null;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.uneject();\n    }\n  }\n\n  private switchAllBuckets() {\n    for (const mapEntry of this.addressMap.values()) {\n      mapEntry.counter.switchBuckets();\n    }\n  }\n\n  private startTimer(delayMs: number) {\n    this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\n    this.ejectionTimer.unref?.();\n  }\n\n  private runChecks() {\n    const ejectionTimestamp = new Date();\n    trace('Ejection timer running');\n\n    this.switchAllBuckets();\n\n    if (!this.latestConfig) {\n      return;\n    }\n    this.timerStartTime = ejectionTimestamp;\n    this.startTimer(this.latestConfig.getIntervalMs());\n\n    this.runSuccessRateCheck(ejectionTimestamp);\n    this.runFailurePercentageCheck(ejectionTimestamp);\n\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      if (mapEntry.currentEjectionTimestamp === null) {\n        if (mapEntry.ejectionTimeMultiplier > 0) {\n          mapEntry.ejectionTimeMultiplier -= 1;\n        }\n      } else {\n        const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n        const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n        const returnTime = new Date(\n          mapEntry.currentEjectionTimestamp.getTime()\n        );\n        returnTime.setMilliseconds(\n          returnTime.getMilliseconds() +\n            Math.min(\n              baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier,\n              Math.max(baseEjectionTimeMs, maxEjectionTimeMs)\n            )\n        );\n        if (returnTime < new Date()) {\n          trace('Unejecting ' + address);\n          this.uneject(mapEntry);\n        }\n      }\n    }\n  }\n\n  updateAddressList(\n    addressList: SubchannelAddress[],\n    lbConfig: LoadBalancingConfig,\n    attributes: { [key: string]: unknown }\n  ): void {\n    if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n      return;\n    }\n    const subchannelAddresses = new Set<string>();\n    for (const address of addressList) {\n      subchannelAddresses.add(subchannelAddressToString(address));\n    }\n    for (const address of subchannelAddresses) {\n      if (!this.addressMap.has(address)) {\n        trace('Adding map entry for ' + address);\n        this.addressMap.set(address, {\n          counter: new CallCounter(),\n          currentEjectionTimestamp: null,\n          ejectionTimeMultiplier: 0,\n          subchannelWrappers: [],\n        });\n      }\n    }\n    for (const key of this.addressMap.keys()) {\n      if (!subchannelAddresses.has(key)) {\n        trace('Removing map entry for ' + key);\n        this.addressMap.delete(key);\n      }\n    }\n    const childPolicy: LoadBalancingConfig = getFirstUsableConfig(\n      lbConfig.getChildPolicy(),\n      true\n    );\n    this.childBalancer.updateAddressList(addressList, childPolicy, attributes);\n\n    if (\n      lbConfig.getSuccessRateEjectionConfig() ||\n      lbConfig.getFailurePercentageEjectionConfig()\n    ) {\n      if (this.timerStartTime) {\n        trace('Previous timer existed. Replacing timer');\n        clearTimeout(this.ejectionTimer);\n        const remainingDelay =\n          lbConfig.getIntervalMs() -\n          (new Date().getTime() - this.timerStartTime.getTime());\n        this.startTimer(remainingDelay);\n      } else {\n        trace('Starting new timer');\n        this.timerStartTime = new Date();\n        this.startTimer(lbConfig.getIntervalMs());\n        this.switchAllBuckets();\n      }\n    } else {\n      trace('Counting disabled. Cancelling timer.');\n      this.timerStartTime = null;\n      clearTimeout(this.ejectionTimer);\n      for (const mapEntry of this.addressMap.values()) {\n        this.uneject(mapEntry);\n        mapEntry.ejectionTimeMultiplier = 0;\n      }\n    }\n\n    this.latestConfig = lbConfig;\n  }\n  exitIdle(): void {\n    this.childBalancer.exitIdle();\n  }\n  resetBackoff(): void {\n    this.childBalancer.resetBackoff();\n  }\n  destroy(): void {\n    clearTimeout(this.ejectionTimer);\n    this.childBalancer.destroy();\n  }\n  getTypeName(): string {\n    return TYPE_NAME;\n  }\n}\n\nexport function setup() {\n  if (OUTLIER_DETECTION_ENABLED) {\n    registerLoadBalancerType(\n      TYPE_NAME,\n      OutlierDetectionLoadBalancer,\n      OutlierDetectionLoadBalancingConfig\n    );\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,oBAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,cAAA,GAAAH,OAAA;AAKA,MAAAI,eAAA,GAAAJ,OAAA;AAMA,MAAAK,6BAAA,GAAAL,OAAA;AACA,MAAAM,QAAA,GAAAN,OAAA;AACA,MAAAO,oBAAA,GAAAP,OAAA;AAIA,MAAAQ,sBAAA,GAAAR,OAAA;AAKA,MAAAS,OAAA,GAAAT,OAAA;AAEA,MAAMU,WAAW,GAAG,mBAAmB;AAEvC,SAASC,KAAKA,CAACC,IAAY;EACzBH,OAAO,CAACE,KAAK,CAACV,WAAA,CAAAY,YAAY,CAACC,KAAK,EAAEJ,WAAW,EAAEE,IAAI,CAAC;AACtD;AAEA,MAAMG,SAAS,GAAG,mBAAmB;AAErC,MAAMC,yBAAyB,GAC7B,CAAC,CAAAC,EAAA,GAAAC,OAAO,CAACC,GAAG,CAACC,0CAA0C,cAAAH,EAAA,cAAAA,EAAA,GAAI,MAAM,MAAM,MAAM;AAgB/E,MAAMI,gCAAgC,GAA8B;EAClEC,YAAY,EAAE,IAAI;EAClBC,sBAAsB,EAAE,GAAG;EAC3BC,aAAa,EAAE,CAAC;EAChBC,cAAc,EAAE;CACjB;AAED,MAAMC,sCAAsC,GAC1C;EACEC,SAAS,EAAE,EAAE;EACbJ,sBAAsB,EAAE,GAAG;EAC3BC,aAAa,EAAE,CAAC;EAChBC,cAAc,EAAE;CACjB;AAUH,SAASG,iBAAiBA,CACxBC,GAAQ,EACRC,SAAiB,EACjBC,YAA0B,EAC1BC,UAAmB;EAEnB,IAAIF,SAAS,IAAID,GAAG,IAAI,OAAOA,GAAG,CAACC,SAAS,CAAC,KAAKC,YAAY,EAAE;IAC9D,MAAME,aAAa,GAAGD,UAAU,GAAG,GAAGA,UAAU,IAAIF,SAAS,EAAE,GAAGA,SAAS;IAC3E,MAAM,IAAII,KAAK,CACb,4BAA4BD,aAAa,0BAA0BF,YAAY,SAAS,OAAOF,GAAG,CAChGC,SAAS,CACV,EAAE,CACJ;;AAEL;AAEA,SAASK,wBAAwBA,CAC/BN,GAAQ,EACRC,SAAiB,EACjBE,UAAmB;EAEnB,MAAMC,aAAa,GAAGD,UAAU,GAAG,GAAGA,UAAU,IAAIF,SAAS,EAAE,GAAGA,SAAS;EAC3E,IAAIA,SAAS,IAAID,GAAG,EAAE;IACpB,IAAI,CAAC,IAAA3B,UAAA,CAAAkC,UAAU,EAACP,GAAG,CAACC,SAAS,CAAC,CAAC,EAAE;MAC/B,MAAM,IAAII,KAAK,CACb,4BAA4BD,aAAa,wCAAwC,OAAOJ,GAAG,CACzFC,SAAS,CACV,EAAE,CACJ;;IAEH,IACE,EACED,GAAG,CAACC,SAAS,CAAC,CAACO,OAAO,IAAI,CAAC,IAC3BR,GAAG,CAACC,SAAS,CAAC,CAACO,OAAO,IAAI,YAAe,IACzCR,GAAG,CAACC,SAAS,CAAC,CAACQ,KAAK,IAAI,CAAC,IACzBT,GAAG,CAACC,SAAS,CAAC,CAACQ,KAAK,IAAI,SAAW,CACpC,EACD;MACA,MAAM,IAAIJ,KAAK,CACb,4BAA4BD,aAAa,8DAA8D,CACxG;;;AAGP;AAEA,SAASM,kBAAkBA,CAACV,GAAQ,EAAEC,SAAiB,EAAEE,UAAmB;EAC1E,MAAMC,aAAa,GAAGD,UAAU,GAAG,GAAGA,UAAU,IAAIF,SAAS,EAAE,GAAGA,SAAS;EAC3EF,iBAAiB,CAACC,GAAG,EAAEC,SAAS,EAAE,QAAQ,EAAEE,UAAU,CAAC;EACvD,IAAIF,SAAS,IAAID,GAAG,IAAI,EAAEA,GAAG,CAACC,SAAS,CAAC,IAAI,CAAC,IAAID,GAAG,CAACC,SAAS,CAAC,IAAI,GAAG,CAAC,EAAE;IACvE,MAAM,IAAII,KAAK,CACb,4BAA4BD,aAAa,yDAAyD,CACnG;;AAEL;AAEA,MAAaO,mCAAmC;EAU9CC,YACEC,UAAyB,EACzBC,kBAAiC,EACjCC,iBAAgC,EAChCC,kBAAiC,EACjCC,mBAA8D,EAC9DC,yBAA0E,EACzDC,WAAkC;IAAlC,KAAAA,WAAW,GAAXA,WAAW;IAE5B,IACEA,WAAW,CAACC,MAAM,GAAG,CAAC,IACtBD,WAAW,CAAC,CAAC,CAAC,CAACE,mBAAmB,EAAE,KAAK,YAAY,EACrD;MACA,MAAM,IAAIhB,KAAK,CACb,mEAAmE,CACpE;;IAEH,IAAI,CAACQ,UAAU,GAAGA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,KAAM;IACtC,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAI,KAAM;IACtD,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAI,MAAO;IACrD,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAI,EAAE;IAClD,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB,GAC3CK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAM/B,gCAAgC,GAAKyB,mBAAmB,IAC7D,IAAI;IACR,IAAI,CAACC,yBAAyB,GAAGA,yBAAyB,GACvDI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACM1B,sCAAsC,GACtCqB,yBAAyB,IAE9B,IAAI;EACV;EACAG,mBAAmBA,CAAA;IACjB,OAAOnC,SAAS;EAClB;EACAsC,YAAYA,CAAA;IACV,OAAO;MACLC,QAAQ,EAAE,IAAApD,UAAA,CAAAqD,YAAY,EAAC,IAAI,CAACb,UAAU,CAAC;MACvCc,kBAAkB,EAAE,IAAAtD,UAAA,CAAAqD,YAAY,EAAC,IAAI,CAACZ,kBAAkB,CAAC;MACzDc,iBAAiB,EAAE,IAAAvD,UAAA,CAAAqD,YAAY,EAAC,IAAI,CAACX,iBAAiB,CAAC;MACvDc,oBAAoB,EAAE,IAAI,CAACb,kBAAkB;MAC7Cc,qBAAqB,EAAE,IAAI,CAACb,mBAAmB;MAC/Cc,2BAA2B,EAAE,IAAI,CAACb,yBAAyB;MAC3Dc,YAAY,EAAE,IAAI,CAACb,WAAW,CAACc,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACV,YAAY,EAAE;KACnE;EACH;EAEAW,aAAaA,CAAA;IACX,OAAO,IAAI,CAACtB,UAAU;EACxB;EACAuB,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACtB,kBAAkB;EAChC;EACAuB,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACtB,iBAAiB;EAC/B;EACAuB,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACtB,kBAAkB;EAChC;EACAuB,4BAA4BA,CAAA;IAC1B,OAAO,IAAI,CAACtB,mBAAmB;EACjC;EACAuB,kCAAkCA,CAAA;IAChC,OAAO,IAAI,CAACtB,yBAAyB;EACvC;EACAuB,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACtB,WAAW;EACzB;EAEAuB,mBAAmBA,CACjBvB,WAAkC;IAElC,OAAO,IAAIR,mCAAmC,CAC5C,IAAI,CAACE,UAAU,EACf,IAAI,CAACC,kBAAkB,EACvB,IAAI,CAACC,iBAAiB,EACtB,IAAI,CAACC,kBAAkB,EACvB,IAAI,CAACC,mBAAmB,EACxB,IAAI,CAACC,yBAAyB,EAC9BC,WAAW,CACZ;EACH;EAEA,OAAOwB,cAAcA,CAAC3C,GAAQ;;IAC5BM,wBAAwB,CAACN,GAAG,EAAE,UAAU,CAAC;IACzCM,wBAAwB,CAACN,GAAG,EAAE,oBAAoB,CAAC;IACnDM,wBAAwB,CAACN,GAAG,EAAE,mBAAmB,CAAC;IAClDU,kBAAkB,CAACV,GAAG,EAAE,sBAAsB,CAAC;IAC/C,IAAI,uBAAuB,IAAIA,GAAG,EAAE;MAClC,IAAI,OAAOA,GAAG,CAAC8B,qBAAqB,KAAK,QAAQ,EAAE;QACjD,MAAM,IAAIzB,KAAK,CACb,kEAAkE,CACnE;;MAEHN,iBAAiB,CACfC,GAAG,CAAC8B,qBAAqB,EACzB,cAAc,EACd,QAAQ,EACR,uBAAuB,CACxB;MACDpB,kBAAkB,CAChBV,GAAG,CAAC8B,qBAAqB,EACzB,wBAAwB,EACxB,uBAAuB,CACxB;MACD/B,iBAAiB,CACfC,GAAG,CAAC8B,qBAAqB,EACzB,eAAe,EACf,QAAQ,EACR,uBAAuB,CACxB;MACD/B,iBAAiB,CACfC,GAAG,CAAC8B,qBAAqB,EACzB,gBAAgB,EAChB,QAAQ,EACR,uBAAuB,CACxB;;IAEH,IAAI,6BAA6B,IAAI9B,GAAG,EAAE;MACxC,IAAI,OAAOA,GAAG,CAAC+B,2BAA2B,KAAK,QAAQ,EAAE;QACvD,MAAM,IAAI1B,KAAK,CACb,wEAAwE,CACzE;;MAEHK,kBAAkB,CAChBV,GAAG,CAAC+B,2BAA2B,EAC/B,WAAW,EACX,6BAA6B,CAC9B;MACDrB,kBAAkB,CAChBV,GAAG,CAAC+B,2BAA2B,EAC/B,wBAAwB,EACxB,6BAA6B,CAC9B;MACDhC,iBAAiB,CACfC,GAAG,CAAC+B,2BAA2B,EAC/B,eAAe,EACf,QAAQ,EACR,6BAA6B,CAC9B;MACDhC,iBAAiB,CACfC,GAAG,CAAC+B,2BAA2B,EAC/B,gBAAgB,EAChB,QAAQ,EACR,6BAA6B,CAC9B;;IAGH,OAAO,IAAIpB,mCAAmC,CAC5CX,GAAG,CAACyB,QAAQ,GAAG,IAAApD,UAAA,CAAAuE,YAAY,EAAC5C,GAAG,CAACyB,QAAQ,CAAC,GAAG,IAAI,EAChDzB,GAAG,CAAC2B,kBAAkB,GAAG,IAAAtD,UAAA,CAAAuE,YAAY,EAAC5C,GAAG,CAAC2B,kBAAkB,CAAC,GAAG,IAAI,EACpE3B,GAAG,CAAC4B,iBAAiB,GAAG,IAAAvD,UAAA,CAAAuE,YAAY,EAAC5C,GAAG,CAAC4B,iBAAiB,CAAC,GAAG,IAAI,EAClE,CAAAxC,EAAA,GAAAY,GAAG,CAAC6B,oBAAoB,cAAAzC,EAAA,cAAAA,EAAA,GAAI,IAAI,EAChCY,GAAG,CAAC8B,qBAAqB,EACzB9B,GAAG,CAAC+B,2BAA2B,EAC/B/B,GAAG,CAACgC,YAAY,CAACC,GAAG,CAAC1D,eAAA,CAAAsE,2BAA2B,CAAC,CAClD;EACH;;AAtKFC,OAAA,CAAAnC,mCAAA,GAAAA,mCAAA;AAyKA,MAAMoC,iCACJ,SAAQpE,sBAAA,CAAAqE,qBAAqB;EAO7BpC,YACEqC,eAAoC,EAC5BC,QAAmB;IAE3B,KAAK,CAACD,eAAe,CAAC;IAFd,KAAAC,QAAQ,GAARA,QAAQ;IALV,KAAAC,cAAc,GAAgC,EAAE;IAChD,KAAAC,OAAO,GAAG,KAAK;IACf,KAAAC,QAAQ,GAAG,CAAC;IAMlB,IAAI,CAACC,oBAAoB,GAAGL,eAAe,CAACM,oBAAoB,EAAE;IAClEN,eAAe,CAACO,4BAA4B,CAC1C,CAACC,UAAU,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,aAAa,KAAI;MACrD,IAAI,CAACN,oBAAoB,GAAGK,QAAQ;MACpC,IAAI,CAAC,IAAI,CAACP,OAAO,EAAE;QACjB,KAAK,MAAMS,QAAQ,IAAI,IAAI,CAACV,cAAc,EAAE;UAC1CU,QAAQ,CAAC,IAAI,EAAEH,aAAa,EAAEC,QAAQ,EAAEC,aAAa,CAAC;;;IAG5D,CAAC,CACF;EACH;EAEAL,oBAAoBA,CAAA;IAClB,IAAI,IAAI,CAACH,OAAO,EAAE;MAChB,OAAOlF,oBAAA,CAAA4F,iBAAiB,CAACC,iBAAiB;KAC3C,MAAM;MACL,OAAO,IAAI,CAACT,oBAAoB;;EAEpC;EAEA;;;;;EAKAE,4BAA4BA,CAACK,QAAmC;IAC9D,IAAI,CAACV,cAAc,CAACa,IAAI,CAACH,QAAQ,CAAC;EACpC;EAEA;;;;;EAKAI,+BAA+BA,CAACJ,QAAmC;IACjE,MAAMK,aAAa,GAAG,IAAI,CAACf,cAAc,CAACgB,OAAO,CAACN,QAAQ,CAAC;IAC3D,IAAIK,aAAa,GAAG,CAAC,CAAC,EAAE;MACtB,IAAI,CAACf,cAAc,CAACiB,MAAM,CAACF,aAAa,EAAE,CAAC,CAAC;;EAEhD;EAEAG,GAAGA,CAAA;IACD,IAAI,CAACC,KAAK,CAACD,GAAG,EAAE;IAChB,IAAI,CAAChB,QAAQ,IAAI,CAAC;EACpB;EAEAkB,KAAKA,CAAA;IACH,IAAI,CAACD,KAAK,CAACC,KAAK,EAAE;IAClB,IAAI,CAAClB,QAAQ,IAAI,CAAC;IAClB,IAAI,IAAI,CAACA,QAAQ,IAAI,CAAC,EAAE;MACtB,IAAI,IAAI,CAACH,QAAQ,EAAE;QACjB,MAAMsB,KAAK,GAAG,IAAI,CAACtB,QAAQ,CAACuB,kBAAkB,CAACN,OAAO,CAAC,IAAI,CAAC;QAC5D,IAAIK,KAAK,IAAI,CAAC,EAAE;UACd,IAAI,CAACtB,QAAQ,CAACuB,kBAAkB,CAACL,MAAM,CAACI,KAAK,EAAE,CAAC,CAAC;;;;EAIzD;EAEAE,KAAKA,CAAA;IACH,IAAI,CAACtB,OAAO,GAAG,IAAI;IACnB,KAAK,MAAMS,QAAQ,IAAI,IAAI,CAACV,cAAc,EAAE;MAC1CU,QAAQ,CACN,IAAI,EACJ,IAAI,CAACP,oBAAoB,EACzBpF,oBAAA,CAAA4F,iBAAiB,CAACC,iBAAiB,EACnC,CAAC,CAAC,CACH;;EAEL;EAEAY,OAAOA,CAAA;IACL,IAAI,CAACvB,OAAO,GAAG,KAAK;IACpB,KAAK,MAAMS,QAAQ,IAAI,IAAI,CAACV,cAAc,EAAE;MAC1CU,QAAQ,CACN,IAAI,EACJ3F,oBAAA,CAAA4F,iBAAiB,CAACC,iBAAiB,EACnC,IAAI,CAACT,oBAAoB,EACzB,CAAC,CAAC,CACH;;EAEL;EAEAsB,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC1B,QAAQ;EACtB;EAEA2B,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACP,KAAK;EACnB;;AAQF,SAASQ,iBAAiBA,CAAA;EACxB,OAAO;IACLC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE;GACV;AACH;AAEA,MAAMC,WAAW;EAAjBrE,YAAA;IACU,KAAAsE,YAAY,GAAoBJ,iBAAiB,EAAE;IACnD,KAAAK,cAAc,GAAoBL,iBAAiB,EAAE;EAiB/D;EAhBEM,UAAUA,CAAA;IACR,IAAI,CAACF,YAAY,CAACH,OAAO,IAAI,CAAC;EAChC;EACAM,UAAUA,CAAA;IACR,IAAI,CAACH,YAAY,CAACF,OAAO,IAAI,CAAC;EAChC;EACAM,aAAaA,CAAA;IACX,IAAI,CAACH,cAAc,GAAG,IAAI,CAACD,YAAY;IACvC,IAAI,CAACA,YAAY,GAAGJ,iBAAiB,EAAE;EACzC;EACAS,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACJ,cAAc,CAACJ,OAAO;EACpC;EACAS,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,cAAc,CAACH,OAAO;EACpC;;AAUF,MAAMS,sBAAsB;EAC1B7E,YAAoB8E,aAAqB,EAAUC,UAAmB;IAAlD,KAAAD,aAAa,GAAbA,aAAa;IAAkB,KAAAC,UAAU,GAAVA,UAAU;EAAY;EACzEC,IAAIA,CAACC,QAAkB;IACrB,MAAMC,WAAW,GAAG,IAAI,CAACJ,aAAa,CAACE,IAAI,CAACC,QAAQ,CAAC;IACrD,IAAIC,WAAW,CAACC,cAAc,KAAKtH,QAAA,CAAAuH,cAAc,CAACC,QAAQ,EAAE;MAC1D,MAAMC,iBAAiB,GACrBJ,WAAW,CAACrC,UAA+C;MAC7D,MAAMP,QAAQ,GAAGgD,iBAAiB,CAACtB,WAAW,EAAE;MAChD,IAAI1B,QAAQ,EAAE;QACZ,IAAIiD,WAAW,GAAGL,WAAW,CAACK,WAAW;QACzC,IAAI,IAAI,CAACR,UAAU,EAAE;UACnBQ,WAAW,GAAGC,UAAU,IAAG;;YACzB,IAAIA,UAAU,KAAKhI,WAAA,CAAAiI,MAAM,CAACC,EAAE,EAAE;cAC5BpD,QAAQ,CAACqD,OAAO,CAACnB,UAAU,EAAE;aAC9B,MAAM;cACLlC,QAAQ,CAACqD,OAAO,CAAClB,UAAU,EAAE;;YAE/B,CAAAjG,EAAA,GAAA0G,WAAW,CAACK,WAAW,cAAA/G,EAAA,uBAAAA,EAAA,CAAAoH,IAAA,CAAAV,WAAA,EAAGM,UAAU,CAAC;UACvC,CAAC;;QAEH,OAAA9E,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKuE,WAAW;UACdrC,UAAU,EAAEyC,iBAAiB,CAACrB,oBAAoB,EAAE;UACpDsB,WAAW,EAAEA;QAAW;OAE3B,MAAM;QACL,OAAA7E,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKuE,WAAW;UACdrC,UAAU,EAAEyC,iBAAiB,CAACrB,oBAAoB;QAAE;;KAGzD,MAAM;MACL,OAAOiB,WAAW;;EAEtB;;AAGF,MAAaW,4BAA4B;EAOvC7F,YAAY8F,oBAA0C;IAL9C,KAAAC,UAAU,GAA0B,IAAIC,GAAG,EAAoB;IAC/D,KAAAC,YAAY,GAA+C,IAAI;IAE/D,KAAAC,cAAc,GAAgB,IAAI;IAGxC,IAAI,CAACC,aAAa,GAAG,IAAIvI,6BAAA,CAAAwI,wBAAwB,CAC/C,IAAA1I,cAAA,CAAA2I,+BAA+B,EAACP,oBAAoB,EAAE;MACpDQ,gBAAgB,EAAEA,CAChBC,iBAAoC,EACpCC,cAA8B,KAC5B;QACF,MAAMC,kBAAkB,GAAGX,oBAAoB,CAACQ,gBAAgB,CAC9DC,iBAAiB,EACjBC,cAAc,CACf;QACD,MAAMlE,QAAQ,GAAG,IAAI,CAACyD,UAAU,CAACW,GAAG,CAClC,IAAA5I,oBAAA,CAAA6I,yBAAyB,EAACJ,iBAAiB,CAAC,CAC7C;QACD,MAAMjB,iBAAiB,GAAG,IAAInD,iCAAiC,CAC7DsE,kBAAkB,EAClBnE,QAAQ,CACT;QACD,IAAI,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEsE,wBAAwB,MAAK,IAAI,EAAE;UAC/C;UACAtB,iBAAiB,CAACxB,KAAK,EAAE;;QAE3BxB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEuB,kBAAkB,CAACT,IAAI,CAACkC,iBAAiB,CAAC;QACpD,OAAOA,iBAAiB;MAC1B,CAAC;MACDuB,WAAW,EAAEA,CAACC,iBAAoC,EAAEC,MAAc,KAAI;QACpE,IAAID,iBAAiB,KAAKxJ,oBAAA,CAAA4F,iBAAiB,CAAC8D,KAAK,EAAE;UACjDlB,oBAAoB,CAACe,WAAW,CAC9BC,iBAAiB,EACjB,IAAIjC,sBAAsB,CAACkC,MAAM,EAAE,IAAI,CAACE,iBAAiB,EAAE,CAAC,CAC7D;SACF,MAAM;UACLnB,oBAAoB,CAACe,WAAW,CAACC,iBAAiB,EAAEC,MAAM,CAAC;;MAE/D;KACD,CAAC,CACH;IACD,IAAI,CAACG,aAAa,GAAGC,WAAW,CAAC,MAAK,CAAE,CAAC,EAAE,CAAC,CAAC;IAC7CC,aAAa,CAAC,IAAI,CAACF,aAAa,CAAC;EACnC;EAEQD,iBAAiBA,CAAA;IACvB,OACE,IAAI,CAAChB,YAAY,KAAK,IAAI,KACzB,IAAI,CAACA,YAAY,CAACtE,4BAA4B,EAAE,KAAK,IAAI,IACxD,IAAI,CAACsE,YAAY,CAACrE,kCAAkC,EAAE,KAAK,IAAI,CAAC;EAEtE;EAEQyF,yBAAyBA,CAAA;IAC/B,IAAIC,aAAa,GAAG,CAAC;IACrB,KAAK,MAAMhF,QAAQ,IAAI,IAAI,CAACyD,UAAU,CAACwB,MAAM,EAAE,EAAE;MAC/C,IAAIjF,QAAQ,CAACsE,wBAAwB,KAAK,IAAI,EAAE;QAC9CU,aAAa,IAAI,CAAC;;;IAGtB,OAAQA,aAAa,GAAG,GAAG,GAAI,IAAI,CAACvB,UAAU,CAACyB,IAAI;EACrD;EAEQC,mBAAmBA,CAACC,iBAAuB;IACjD,IAAI,CAAC,IAAI,CAACzB,YAAY,EAAE;MACtB;;IAEF,MAAM0B,iBAAiB,GAAG,IAAI,CAAC1B,YAAY,CAACtE,4BAA4B,EAAE;IAC1E,IAAI,CAACgG,iBAAiB,EAAE;MACtB;;IAEFzJ,KAAK,CAAC,4BAA4B,CAAC;IACnC;IACA,MAAM0J,mBAAmB,GAAGD,iBAAiB,CAAC3I,cAAc;IAC5D,IAAI6I,wBAAwB,GAAG,CAAC;IAChC,MAAMC,YAAY,GAAa,EAAE;IACjC,KAAK,MAAM,CAACC,OAAO,EAAEzF,QAAQ,CAAC,IAAI,IAAI,CAACyD,UAAU,EAAE;MACjD,MAAMiC,SAAS,GAAG1F,QAAQ,CAACqD,OAAO,CAAChB,gBAAgB,EAAE;MACrD,MAAMsD,QAAQ,GAAG3F,QAAQ,CAACqD,OAAO,CAACf,eAAe,EAAE;MACnD1G,KAAK,CACH,YAAY,GACV6J,OAAO,GACP,cAAc,GACdC,SAAS,GACT,YAAY,GACZC,QAAQ,GACR,uBAAuB,GACvBL,mBAAmB,CACtB;MACD,IAAII,SAAS,GAAGC,QAAQ,IAAIL,mBAAmB,EAAE;QAC/CC,wBAAwB,IAAI,CAAC;QAC7BC,YAAY,CAAC1E,IAAI,CAAC4E,SAAS,IAAIA,SAAS,GAAGC,QAAQ,CAAC,CAAC;;;IAGzD/J,KAAK,CACH,QAAQ,GACN2J,wBAAwB,GACxB,mDAAmD,GACnD,IAAI,CAACR,yBAAyB,EAAE,GAChC,iBAAiB,GACjBS,YAAY,GACZ,GAAG,CACN;IACD,IAAID,wBAAwB,GAAGF,iBAAiB,CAAC5I,aAAa,EAAE;MAC9D;;IAGF;IACA,MAAMmJ,eAAe,GACnBJ,YAAY,CAACK,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,GAAGP,YAAY,CAACtH,MAAM;IAC5D,IAAI8H,uBAAuB,GAAG,CAAC;IAC/B,KAAK,MAAMC,IAAI,IAAIT,YAAY,EAAE;MAC/B,MAAMU,SAAS,GAAGD,IAAI,GAAGL,eAAe;MACxCI,uBAAuB,IAAIE,SAAS,GAAGA,SAAS;;IAElD,MAAMC,mBAAmB,GAAGH,uBAAuB,GAAGR,YAAY,CAACtH,MAAM;IACzE,MAAMkI,gBAAgB,GAAGC,IAAI,CAACC,IAAI,CAACH,mBAAmB,CAAC;IACvD,MAAMI,iBAAiB,GACrBX,eAAe,GACfQ,gBAAgB,IAAIf,iBAAiB,CAAC9I,YAAY,GAAG,IAAI,CAAC;IAC5DX,KAAK,CACH,QAAQ,GAAGwK,gBAAgB,GAAG,qBAAqB,GAAGG,iBAAiB,CACxE;IAED;IACA,KAAK,MAAM,CAACd,OAAO,EAAEzF,QAAQ,CAAC,IAAI,IAAI,CAACyD,UAAU,CAAC+C,OAAO,EAAE,EAAE;MAC3D;MACA,IACE,IAAI,CAACzB,yBAAyB,EAAE,IAChC,IAAI,CAACpB,YAAY,CAACvE,qBAAqB,EAAE,EACzC;QACA;;MAEF;MACA,MAAMsG,SAAS,GAAG1F,QAAQ,CAACqD,OAAO,CAAChB,gBAAgB,EAAE;MACrD,MAAMsD,QAAQ,GAAG3F,QAAQ,CAACqD,OAAO,CAACf,eAAe,EAAE;MACnD,IAAIoD,SAAS,GAAGC,QAAQ,GAAGL,mBAAmB,EAAE;QAC9C;;MAEF;MACA,MAAMmB,WAAW,GAAGf,SAAS,IAAIA,SAAS,GAAGC,QAAQ,CAAC;MACtD/J,KAAK,CAAC,qBAAqB,GAAG6J,OAAO,GAAG,eAAe,GAAGgB,WAAW,CAAC;MACtE,IAAIA,WAAW,GAAGF,iBAAiB,EAAE;QACnC,MAAMG,YAAY,GAAGL,IAAI,CAACM,MAAM,EAAE,GAAG,GAAG;QACxC/K,KAAK,CACH,YAAY,GACV6J,OAAO,GACP,gBAAgB,GAChBiB,YAAY,GACZ,0BAA0B,GAC1BrB,iBAAiB,CAAC7I,sBAAsB,CAC3C;QACD,IAAIkK,YAAY,GAAGrB,iBAAiB,CAAC7I,sBAAsB,EAAE;UAC3DZ,KAAK,CAAC,qBAAqB,GAAG6J,OAAO,CAAC;UACtC,IAAI,CAACjE,KAAK,CAACxB,QAAQ,EAAEoF,iBAAiB,CAAC;;;;EAI/C;EAEQwB,yBAAyBA,CAACxB,iBAAuB;IACvD,IAAI,CAAC,IAAI,CAACzB,YAAY,EAAE;MACtB;;IAEF,MAAMkD,uBAAuB,GAC3B,IAAI,CAAClD,YAAY,CAACrE,kCAAkC,EAAE;IACxD,IAAI,CAACuH,uBAAuB,EAAE;MAC5B;;IAEFjL,KAAK,CACH,8CAA8C,GAC5CiL,uBAAuB,CAACjK,SAAS,GACjC,4BAA4B,GAC5BiK,uBAAuB,CAACnK,cAAc,CACzC;IACD;IACA,IAAIoK,yBAAyB,GAAG,CAAC;IACjC,KAAK,MAAM9G,QAAQ,IAAI,IAAI,CAACyD,UAAU,CAACwB,MAAM,EAAE,EAAE;MAC/C,MAAMS,SAAS,GAAG1F,QAAQ,CAACqD,OAAO,CAAChB,gBAAgB,EAAE;MACrD,MAAMsD,QAAQ,GAAG3F,QAAQ,CAACqD,OAAO,CAACf,eAAe,EAAE;MACnD,IAAIoD,SAAS,GAAGC,QAAQ,IAAIkB,uBAAuB,CAACnK,cAAc,EAAE;QAClEoK,yBAAyB,IAAI,CAAC;;;IAGlC,IAAIA,yBAAyB,GAAGD,uBAAuB,CAACpK,aAAa,EAAE;MACrE;;IAGF;IACA,KAAK,MAAM,CAACgJ,OAAO,EAAEzF,QAAQ,CAAC,IAAI,IAAI,CAACyD,UAAU,CAAC+C,OAAO,EAAE,EAAE;MAC3D;MACA,IACE,IAAI,CAACzB,yBAAyB,EAAE,IAChC,IAAI,CAACpB,YAAY,CAACvE,qBAAqB,EAAE,EACzC;QACA;;MAEF;MACA,MAAMsG,SAAS,GAAG1F,QAAQ,CAACqD,OAAO,CAAChB,gBAAgB,EAAE;MACrD,MAAMsD,QAAQ,GAAG3F,QAAQ,CAACqD,OAAO,CAACf,eAAe,EAAE;MACnD1G,KAAK,CAAC,sBAAsB,GAAG8J,SAAS,GAAG,YAAY,GAAGC,QAAQ,CAAC;MACnE,IAAID,SAAS,GAAGC,QAAQ,GAAGkB,uBAAuB,CAACnK,cAAc,EAAE;QACjE;;MAEF;MACA,MAAMqK,iBAAiB,GAAIpB,QAAQ,GAAG,GAAG,IAAKA,QAAQ,GAAGD,SAAS,CAAC;MACnE,IAAIqB,iBAAiB,GAAGF,uBAAuB,CAACjK,SAAS,EAAE;QACzD,MAAM8J,YAAY,GAAGL,IAAI,CAACM,MAAM,EAAE,GAAG,GAAG;QACxC/K,KAAK,CACH,YAAY,GACV6J,OAAO,GACP,gBAAgB,GAChBiB,YAAY,GACZ,0BAA0B,GAC1BG,uBAAuB,CAACrK,sBAAsB,CACjD;QACD,IAAIkK,YAAY,GAAGG,uBAAuB,CAACrK,sBAAsB,EAAE;UACjEZ,KAAK,CAAC,qBAAqB,GAAG6J,OAAO,CAAC;UACtC,IAAI,CAACjE,KAAK,CAACxB,QAAQ,EAAEoF,iBAAiB,CAAC;;;;EAI/C;EAEQ5D,KAAKA,CAACxB,QAAkB,EAAEoF,iBAAuB;IACvDpF,QAAQ,CAACsE,wBAAwB,GAAG,IAAI0C,IAAI,EAAE;IAC9ChH,QAAQ,CAACiH,sBAAsB,IAAI,CAAC;IACpC,KAAK,MAAMjE,iBAAiB,IAAIhD,QAAQ,CAACuB,kBAAkB,EAAE;MAC3DyB,iBAAiB,CAACxB,KAAK,EAAE;;EAE7B;EAEQC,OAAOA,CAACzB,QAAkB;IAChCA,QAAQ,CAACsE,wBAAwB,GAAG,IAAI;IACxC,KAAK,MAAMtB,iBAAiB,IAAIhD,QAAQ,CAACuB,kBAAkB,EAAE;MAC3DyB,iBAAiB,CAACvB,OAAO,EAAE;;EAE/B;EAEQyF,gBAAgBA,CAAA;IACtB,KAAK,MAAMlH,QAAQ,IAAI,IAAI,CAACyD,UAAU,CAACwB,MAAM,EAAE,EAAE;MAC/CjF,QAAQ,CAACqD,OAAO,CAACjB,aAAa,EAAE;;EAEpC;EAEQ+E,UAAUA,CAACC,OAAe;;IAChC,IAAI,CAACxC,aAAa,GAAGyC,UAAU,CAAC,MAAM,IAAI,CAACC,SAAS,EAAE,EAAEF,OAAO,CAAC;IAChE,CAAAG,EAAA,IAAArL,EAAA,OAAI,CAAC0I,aAAa,EAACvD,KAAK,cAAAkG,EAAA,uBAAAA,EAAA,CAAAjE,IAAA,CAAApH,EAAA,CAAI;EAC9B;EAEQoL,SAASA,CAAA;IACf,MAAMlC,iBAAiB,GAAG,IAAI4B,IAAI,EAAE;IACpCpL,KAAK,CAAC,wBAAwB,CAAC;IAE/B,IAAI,CAACsL,gBAAgB,EAAE;IAEvB,IAAI,CAAC,IAAI,CAACvD,YAAY,EAAE;MACtB;;IAEF,IAAI,CAACC,cAAc,GAAGwB,iBAAiB;IACvC,IAAI,CAAC+B,UAAU,CAAC,IAAI,CAACxD,YAAY,CAAC1E,aAAa,EAAE,CAAC;IAElD,IAAI,CAACkG,mBAAmB,CAACC,iBAAiB,CAAC;IAC3C,IAAI,CAACwB,yBAAyB,CAACxB,iBAAiB,CAAC;IAEjD,KAAK,MAAM,CAACK,OAAO,EAAEzF,QAAQ,CAAC,IAAI,IAAI,CAACyD,UAAU,CAAC+C,OAAO,EAAE,EAAE;MAC3D,IAAIxG,QAAQ,CAACsE,wBAAwB,KAAK,IAAI,EAAE;QAC9C,IAAItE,QAAQ,CAACiH,sBAAsB,GAAG,CAAC,EAAE;UACvCjH,QAAQ,CAACiH,sBAAsB,IAAI,CAAC;;OAEvC,MAAM;QACL,MAAMrJ,kBAAkB,GAAG,IAAI,CAAC+F,YAAY,CAACzE,qBAAqB,EAAE;QACpE,MAAMrB,iBAAiB,GAAG,IAAI,CAAC8F,YAAY,CAACxE,oBAAoB,EAAE;QAClE,MAAMqI,UAAU,GAAG,IAAIR,IAAI,CACzBhH,QAAQ,CAACsE,wBAAwB,CAACmD,OAAO,EAAE,CAC5C;QACDD,UAAU,CAACE,eAAe,CACxBF,UAAU,CAACG,eAAe,EAAE,GAC1BtB,IAAI,CAACuB,GAAG,CACNhK,kBAAkB,GAAGoC,QAAQ,CAACiH,sBAAsB,EACpDZ,IAAI,CAACwB,GAAG,CAACjK,kBAAkB,EAAEC,iBAAiB,CAAC,CAChD,CACJ;QACD,IAAI2J,UAAU,GAAG,IAAIR,IAAI,EAAE,EAAE;UAC3BpL,KAAK,CAAC,aAAa,GAAG6J,OAAO,CAAC;UAC9B,IAAI,CAAChE,OAAO,CAACzB,QAAQ,CAAC;;;;EAI9B;EAEA8H,iBAAiBA,CACfC,WAAgC,EAChCC,QAA6B,EAC7BC,UAAsC;IAEtC,IAAI,EAAED,QAAQ,YAAYvK,mCAAmC,CAAC,EAAE;MAC9D;;IAEF,MAAMyK,mBAAmB,GAAG,IAAIC,GAAG,EAAU;IAC7C,KAAK,MAAM1C,OAAO,IAAIsC,WAAW,EAAE;MACjCG,mBAAmB,CAACE,GAAG,CAAC,IAAA5M,oBAAA,CAAA6I,yBAAyB,EAACoB,OAAO,CAAC,CAAC;;IAE7D,KAAK,MAAMA,OAAO,IAAIyC,mBAAmB,EAAE;MACzC,IAAI,CAAC,IAAI,CAACzE,UAAU,CAAC4E,GAAG,CAAC5C,OAAO,CAAC,EAAE;QACjC7J,KAAK,CAAC,uBAAuB,GAAG6J,OAAO,CAAC;QACxC,IAAI,CAAChC,UAAU,CAAC6E,GAAG,CAAC7C,OAAO,EAAE;UAC3BpC,OAAO,EAAE,IAAItB,WAAW,EAAE;UAC1BuC,wBAAwB,EAAE,IAAI;UAC9B2C,sBAAsB,EAAE,CAAC;UACzB1F,kBAAkB,EAAE;SACrB,CAAC;;;IAGN,KAAK,MAAMgH,GAAG,IAAI,IAAI,CAAC9E,UAAU,CAAC+E,IAAI,EAAE,EAAE;MACxC,IAAI,CAACN,mBAAmB,CAACG,GAAG,CAACE,GAAG,CAAC,EAAE;QACjC3M,KAAK,CAAC,yBAAyB,GAAG2M,GAAG,CAAC;QACtC,IAAI,CAAC9E,UAAU,CAACgF,MAAM,CAACF,GAAG,CAAC;;;IAG/B,MAAMtK,WAAW,GAAwB,IAAA5C,eAAA,CAAAqN,oBAAoB,EAC3DV,QAAQ,CAACzI,cAAc,EAAE,EACzB,IAAI,CACL;IACD,IAAI,CAACsE,aAAa,CAACiE,iBAAiB,CAACC,WAAW,EAAE9J,WAAW,EAAEgK,UAAU,CAAC;IAE1E,IACED,QAAQ,CAAC3I,4BAA4B,EAAE,IACvC2I,QAAQ,CAAC1I,kCAAkC,EAAE,EAC7C;MACA,IAAI,IAAI,CAACsE,cAAc,EAAE;QACvBhI,KAAK,CAAC,yCAAyC,CAAC;QAChD+M,YAAY,CAAC,IAAI,CAAC/D,aAAa,CAAC;QAChC,MAAMgE,cAAc,GAClBZ,QAAQ,CAAC/I,aAAa,EAAE,IACvB,IAAI+H,IAAI,EAAE,CAACS,OAAO,EAAE,GAAG,IAAI,CAAC7D,cAAc,CAAC6D,OAAO,EAAE,CAAC;QACxD,IAAI,CAACN,UAAU,CAACyB,cAAc,CAAC;OAChC,MAAM;QACLhN,KAAK,CAAC,oBAAoB,CAAC;QAC3B,IAAI,CAACgI,cAAc,GAAG,IAAIoD,IAAI,EAAE;QAChC,IAAI,CAACG,UAAU,CAACa,QAAQ,CAAC/I,aAAa,EAAE,CAAC;QACzC,IAAI,CAACiI,gBAAgB,EAAE;;KAE1B,MAAM;MACLtL,KAAK,CAAC,sCAAsC,CAAC;MAC7C,IAAI,CAACgI,cAAc,GAAG,IAAI;MAC1B+E,YAAY,CAAC,IAAI,CAAC/D,aAAa,CAAC;MAChC,KAAK,MAAM5E,QAAQ,IAAI,IAAI,CAACyD,UAAU,CAACwB,MAAM,EAAE,EAAE;QAC/C,IAAI,CAACxD,OAAO,CAACzB,QAAQ,CAAC;QACtBA,QAAQ,CAACiH,sBAAsB,GAAG,CAAC;;;IAIvC,IAAI,CAACtD,YAAY,GAAGqE,QAAQ;EAC9B;EACAa,QAAQA,CAAA;IACN,IAAI,CAAChF,aAAa,CAACgF,QAAQ,EAAE;EAC/B;EACAC,YAAYA,CAAA;IACV,IAAI,CAACjF,aAAa,CAACiF,YAAY,EAAE;EACnC;EACAC,OAAOA,CAAA;IACLJ,YAAY,CAAC,IAAI,CAAC/D,aAAa,CAAC;IAChC,IAAI,CAACf,aAAa,CAACkF,OAAO,EAAE;EAC9B;EACAC,WAAWA,CAAA;IACT,OAAOhN,SAAS;EAClB;;AAlXF4D,OAAA,CAAA2D,4BAAA,GAAAA,4BAAA;AAqXA,SAAgB0F,KAAKA,CAAA;EACnB,IAAIhN,yBAAyB,EAAE;IAC7B,IAAAb,cAAA,CAAA8N,wBAAwB,EACtBlN,SAAS,EACTuH,4BAA4B,EAC5B9F,mCAAmC,CACpC;;AAEL;AARAmC,OAAA,CAAAqJ,KAAA,GAAAA,KAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}